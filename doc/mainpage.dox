
/*!
	\mainpage

	\section syntax Syntax

	\li Argument starts with two dashes. For example \c --argument.
	\li Flag starts with one dash. For example \c -b.
	\li If argument has value than value can be specified after space or after
		equal sign. For example \c --argument \c value and \c --argument=value.
	\li Flags without values can be combined into one block. For example
		\c -abc defines three flags \c -a, \c -b and \c -c.
	\li The last flag in flag's block can be with value. Then it's possible to
		type the next \c -abc=value. And here flag \c -c will have value \c value.
	\li Args::MultiArg class provides ability to define more than one value for argument.
		This type of arguments can be specified more than once in the command
		line. And the resulted value of the argument will be Args::StringList.
	\li Args::Command class can be used to define command in command line interface.
	   Command is the argument without dash/dashes at the beginning, \c add for example.
	\li Args::Command can has children arguments or even subcommands. Subcommand can be
	   added using Args::ArgAsCommand class.
	\li In Args groups can be used to group arguments into groups to check their
		definitions after parsing, so if constraint of group will be violated
		exception will be thrown.
	\li Args provides Args::Help argument that provides help printing. Args::Help
		uses \c -h, \c --help arguments. Args::Help can receive value with name
		of argument or command to print help about. If Args::Help will receive name
		of the command as value then can be set second value with name of subcommand
		or child argument to receive help about child argument.
	\li If Args don't know about argument in command line interface it provides
		information about possible arguments if some misspelling was in command
		line interface. If Args can't assume anything about entered argument it
		will just say about unknown argument through the exception and parsing will
		fail.

	\section types Different types of strings.

	Since version 4.0.0 Args can be built with different strings - std::string,
	std::wstring and QString.

	\li To build Args with \c std::wstring support define \c ARGS_WSTRING_BUILD
	\li To build Args with \c QString support define \c ARGS_QSTRING_BUILD
	\li If nothing was defined then Args will be build with \c std::string.

	\section stringlist Different types of list of strings.

	Args extensively uses list of string in internal structures and to return
	values of arguments outside. In the code this is Args::StringList
	type defined in Args/types.hpp. By default underlying type is
	\c std::vector or \c QVector when building with Qt that can be changed to
	\c std::list, \c QLinkedList or \c std::deque, \c QList.

	\li Define \c ARGS_LIST to build Args with \c std::list, \c QLinkedList
		as \c StringList
	\li Define \c ARGS_DEQUE to build Args with \c std::deque, \c QList
		as \c StringList

	\section qa Q/A

	Why not to add description, long description, etc into constructors of
	arguments, so it will be possible to initialize argument in one line?

	\li This is impossible because constructors will be ambiguous but you can use
	auxiliary API that allows to define arguments in one line of code.

	How can I add Args to my project?

	\li The simplest way is just copy Args directory with headers to any location in
	your project. With CMake you can clone entire Args project somewhere in your
	project and just do \c add_subdirectory(), if you will do so you have to
	add include directory path to your project with
	\c include_directories( \c ${Args_INCLUDE_DIRECTORIES} \c ). With QMake you can
	use \c Args/Args.pri.

	\li You can clone/download Args, build and install Args with CMake. In this
	case it will be possible to use \c find_package( \c Args \c ) in CMakeLists.txt of
	your project, and sure you can use \c ${Args_INCLUDE_DIRECTORIES} in your
	CMake scripts.

	What does \c build.rb file for?

	\li \c build.rb is Ruby program for building Args, this is project file for
	Mxx_ru build system. In most cases this file is not necessary and can be simply
	ignored. Long time ago I used Mxx_ru as build system in my projects and this
	file is just because of historical reasons. In the subdirectories you can find
	different Ruby scripts, like \c prj.rb, these files are project files for
	corresponding subprojects (examples/tests) for Mxx_ru build system.

	What does \c runtests.rb file for?

	\li \c runtests.rb is simple Ruby script to launch all tests. This file is
	copying to build directory by CMake and QMake and can be used to launch tests.
	And sure with CMake you can use ctest executable to launch tests too.

	\section example Example

	First of all you must know that practically all classes of the Args throws
	exceptions on errors and there is one specific exceptions that inform you
	about that that help was shown. This specific exception
	(\c HelpHasBeenPrintedException) is needed for processing program's logic
	that usually stops execution at this point.

	Since version 5.0.0 Args provides two API: the old one and auxiliary API
	that allows to define arguments in one line of code. Let's look.

	\include oneline.cpp

	And with the old syntax.

	\include example.cpp

	Help output for the example with the old syntax.

	\verbinclude help.txt

	That's it. Use it and enjoy it. Good luck.
*/
